from __future__ import annotations

import warnings
from typing import Dict, Type


class MessageSkeleton:
    __skeleton = {
        "english": {
            "message": {
                "greeting": "Welcome to {user}'s contribution report",
                "source": "This report is generated by [contribution-markdown-report]({link}).",
                "inquiry": "If you have any question or problem, please report [here]({link}).",
                "summary": "Summary for contribution",
                "today": "{date} was {length}th day since the start of trip, and there was {count} new contribution.",
                "max": "Maximum contribution day is {date}, which is {count}.",
                "total": "During the trip, total contribuition count is {sum} and average contribution count is {avg}.",
                "current": "Current continuous contribution trip is {length} days from {start}.",
                "longest": "Longest continuous contribution trip was {length} days from {start} to {end}.",
                "graph": "Graph for contribution",
            },
            "label": {
                "dayofweek": ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
                "month": ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            },
            "axis": {
                "contribution_count": "contribution count",
                "day": "day",
                "dayofweek": "dayofweek",
                "month": "month",
                "year": "year",
            },
            "graph": {
                "count_sum_recent": "Number of days per contribution up to the last 4 weeks",
                "count_sum_full": "Number of days per contribution",
                "dayofweek_sum_recent": "Number of contribution per day of week up to the last 12 weeks",
                "dayofweek_mean_full": "Average of contribution per day of week",
                "month_sum_recent": "Number of contribution per month up to the last year",
                "year_sum_full": "Number of contribution per year",
            },
        },
    }

    @classmethod
    def get_skeleton(
        cls: Type[MessageSkeleton],
        language: str,
    ) -> Dict[str, object]:
        # TODO : Fix type error with detail return type
        default_language = "english"
        supported_language = [
            default_language,  # english
        ]

        if language.lower() not in supported_language:
            warnings.warn("Not supported languge, use default setting")
            language = default_language

        return cls.__skeleton[language]
